package net.minecraft.data.worldgen;

import net.minecraft.world.level.block.state.StateHolder;
import net.minecraft.world.level.material.Fluids;
import net.minecraft.world.level.block.HugeMushroomBlock;
import net.minecraft.world.level.block.state.properties.Property;
import net.minecraft.world.level.block.SweetBerryBushBlock;
import net.minecraft.world.level.material.FluidState;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraft.world.level.levelgen.feature.configurations.RandomBooleanFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.WeightedConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.configurations.RandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleRandomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.PlainFlowerProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.ForestFlowerProvider;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BushFoliagePlacer;
import net.minecraft.world.level.levelgen.placement.FrequencyWithExtraChanceDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.treedecorators.AlterGroundDecorator;
import net.minecraft.world.level.levelgen.feature.trunkplacers.GiantTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaPineFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.MegaJungleTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.MegaJungleFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.FancyTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FancyFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.treedecorators.TreeDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.LeaveVineDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.TrunkVineDecorator;
import net.minecraft.world.level.levelgen.feature.treedecorators.CocoaDecorator;
import net.minecraft.world.level.levelgen.feature.foliageplacers.PineFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.SpruceFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.trunkplacers.ForkingTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.AcaciaFoliagePlacer;
import net.minecraft.world.level.levelgen.Heightmap;
import net.minecraft.world.level.levelgen.feature.featuresize.ThreeLayersFeatureSize;
import java.util.OptionalInt;
import net.minecraft.world.level.levelgen.feature.trunkplacers.DarkOakTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.DarkOakFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.featuresize.FeatureSize;
import net.minecraft.world.level.levelgen.feature.trunkplacers.TrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.FoliagePlacer;
import net.minecraft.world.level.levelgen.feature.featuresize.TwoLayersFeatureSize;
import net.minecraft.world.level.levelgen.feature.trunkplacers.StraightTrunkPlacer;
import net.minecraft.world.level.levelgen.feature.foliageplacers.BlobFoliagePlacer;
import net.minecraft.world.level.levelgen.feature.configurations.HugeMushroomFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ReplaceBlockConfiguration;
import net.minecraft.world.level.levelgen.placement.DepthAverageConfigation;
import net.minecraft.world.level.levelgen.feature.configurations.OreConfiguration;
import net.minecraft.world.level.levelgen.feature.blockplacers.ColumnPlacer;
import net.minecraft.world.level.levelgen.feature.configurations.NoiseDependantDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraft.world.level.levelgen.feature.configurations.BlockPileConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.RotatedBlockProvider;
import net.minecraft.world.level.block.Block;
import java.util.Set;
import net.minecraft.world.level.levelgen.feature.configurations.SpringConfiguration;
import com.google.common.collect.ImmutableSet;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.levelgen.placement.ChanceDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.RangeDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.NoiseCountFactorDecoratorConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.NoneDecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.CarvingMaskDecoratorConfiguration;
import net.minecraft.world.level.levelgen.GenerationStep;
import net.minecraft.world.level.levelgen.feature.configurations.SimpleBlockConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.BlockStateConfiguration;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.configurations.DiskConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ProbabilityFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ReplaceSphereConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.ColumnFeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.CountConfiguration;
import net.minecraft.world.level.levelgen.feature.configurations.DeltaFeatureConfiguration;
import net.minecraft.util.UniformInt;
import net.minecraft.world.level.levelgen.placement.ConfiguredDecorator;
import net.minecraft.world.level.levelgen.feature.configurations.DecoratorConfiguration;
import net.minecraft.world.level.levelgen.placement.FeatureDecorator;
import net.minecraft.world.level.levelgen.feature.configurations.EndGatewayConfiguration;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.core.BlockPos;
import net.minecraft.world.level.levelgen.feature.SpikeFeature;
import java.util.List;
import net.minecraft.world.level.levelgen.feature.configurations.SpikeConfiguration;
import net.minecraft.world.level.levelgen.feature.blockplacers.DoublePlantPlacer;
import net.minecraft.world.level.levelgen.feature.blockplacers.BlockPlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.configurations.RandomPatchConfiguration;
import net.minecraft.world.level.levelgen.feature.blockplacers.SimpleBlockPlacer;
import net.minecraft.world.level.levelgen.feature.stateproviders.SimpleStateProvider;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.core.Registry;
import net.minecraft.data.BuiltinRegistries;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import java.util.function.Supplier;
import com.google.common.collect.ImmutableList;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.HugeFungusConfiguration;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;

public class Features {
    public static final ConfiguredFeature<?, ?> END_SPIKE;
    public static final ConfiguredFeature<?, ?> END_GATEWAY;
    public static final ConfiguredFeature<?, ?> END_GATEWAY_DELAYED;
    public static final ConfiguredFeature<?, ?> CHORUS_PLANT;
    public static final ConfiguredFeature<?, ?> END_ISLAND;
    public static final ConfiguredFeature<?, ?> END_ISLAND_DECORATED;
    public static final ConfiguredFeature<?, ?> DELTA;
    public static final ConfiguredFeature<?, ?> SMALL_BASALT_COLUMNS;
    public static final ConfiguredFeature<?, ?> LARGE_BASALT_COLUMNS;
    public static final ConfiguredFeature<?, ?> BASALT_BLOBS;
    public static final ConfiguredFeature<?, ?> BLACKSTONE_BLOBS;
    public static final ConfiguredFeature<?, ?> GLOWSTONE_EXTRA;
    public static final ConfiguredFeature<?, ?> GLOWSTONE;
    public static final ConfiguredFeature<?, ?> CRIMSON_FOREST_VEGETATION;
    public static final ConfiguredFeature<?, ?> WARPED_FOREST_VEGETATION;
    public static final ConfiguredFeature<?, ?> NETHER_SPROUTS;
    public static final ConfiguredFeature<?, ?> TWISTING_VINES;
    public static final ConfiguredFeature<?, ?> WEEPING_VINES;
    public static final ConfiguredFeature<?, ?> BASALT_PILLAR;
    public static final ConfiguredFeature<?, ?> SEAGRASS_COLD;
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_COLD;
    public static final ConfiguredFeature<?, ?> SEAGRASS_NORMAL;
    public static final ConfiguredFeature<?, ?> SEAGRASS_RIVER;
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP;
    public static final ConfiguredFeature<?, ?> SEAGRASS_SWAMP;
    public static final ConfiguredFeature<?, ?> SEAGRASS_WARM;
    public static final ConfiguredFeature<?, ?> SEAGRASS_DEEP_WARM;
    public static final ConfiguredFeature<?, ?> SEA_PICKLE;
    public static final ConfiguredFeature<?, ?> ICE_SPIKE;
    public static final ConfiguredFeature<?, ?> ICE_PATCH;
    public static final ConfiguredFeature<?, ?> FOREST_ROCK;
    public static final ConfiguredFeature<?, ?> SEAGRASS_SIMPLE;
    public static final ConfiguredFeature<?, ?> ICEBERG_PACKED;
    public static final ConfiguredFeature<?, ?> ICEBERG_BLUE;
    public static final ConfiguredFeature<?, ?> KELP_COLD;
    public static final ConfiguredFeature<?, ?> KELP_WARM;
    public static final ConfiguredFeature<?, ?> BLUE_ICE;
    public static final ConfiguredFeature<?, ?> BAMBOO_LIGHT;
    public static final ConfiguredFeature<?, ?> BAMBOO;
    public static final ConfiguredFeature<?, ?> VINES;
    public static final ConfiguredFeature<?, ?> LAKE_WATER;
    public static final ConfiguredFeature<?, ?> LAKE_LAVA;
    public static final ConfiguredFeature<?, ?> DISK_CLAY;
    public static final ConfiguredFeature<?, ?> DISK_GRAVEL;
    public static final ConfiguredFeature<?, ?> DISK_SAND;
    public static final ConfiguredFeature<?, ?> FREEZE_TOP_LAYER;
    public static final ConfiguredFeature<?, ?> BONUS_CHEST;
    public static final ConfiguredFeature<?, ?> VOID_START_PLATFORM;
    public static final ConfiguredFeature<?, ?> MONSTER_ROOM;
    public static final ConfiguredFeature<?, ?> WELL;
    public static final ConfiguredFeature<?, ?> FOSSIL;
    public static final ConfiguredFeature<?, ?> SPRING_LAVA_DOUBLE;
    public static final ConfiguredFeature<?, ?> SPRING_LAVA;
    public static final ConfiguredFeature<?, ?> SPRING_DELTA;
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED;
    public static final ConfiguredFeature<?, ?> SPRING_CLOSED_DOUBLE;
    public static final ConfiguredFeature<?, ?> SPRING_OPEN;
    public static final ConfiguredFeature<?, ?> SPRING_WATER;
    public static final ConfiguredFeature<?, ?> PILE_HAY;
    public static final ConfiguredFeature<?, ?> PILE_MELON;
    public static final ConfiguredFeature<?, ?> PILE_SNOW;
    public static final ConfiguredFeature<?, ?> PILE_ICE;
    public static final ConfiguredFeature<?, ?> PILE_PUMPKIN;
    public static final ConfiguredFeature<?, ?> PATCH_FIRE;
    public static final ConfiguredFeature<?, ?> PATCH_SOUL_FIRE;
    public static final ConfiguredFeature<?, ?> PATCH_BROWN_MUSHROOM;
    public static final ConfiguredFeature<?, ?> PATCH_RED_MUSHROOM;
    public static final ConfiguredFeature<?, ?> PATCH_CRIMSON_ROOTS;
    public static final ConfiguredFeature<?, ?> PATCH_SUNFLOWER;
    public static final ConfiguredFeature<?, ?> PATCH_PUMPKIN;
    public static final ConfiguredFeature<?, ?> PATCH_TAIGA_GRASS;
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_BUSH;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_PLAIN;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_FOREST;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_BADLANDS;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_SAVANNA;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_NORMAL;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA_2;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_TAIGA;
    public static final ConfiguredFeature<?, ?> PATCH_GRASS_JUNGLE;
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_2;
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH;
    public static final ConfiguredFeature<?, ?> PATCH_DEAD_BUSH_BADLANDS;
    public static final ConfiguredFeature<?, ?> PATCH_MELON;
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_SPARSE;
    public static final ConfiguredFeature<?, ?> PATCH_BERRY_DECORATED;
    public static final ConfiguredFeature<?, ?> PATCH_WATERLILLY;
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS_2;
    public static final ConfiguredFeature<?, ?> PATCH_TALL_GRASS;
    public static final ConfiguredFeature<?, ?> PATCH_LARGE_FERN;
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS;
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DESERT;
    public static final ConfiguredFeature<?, ?> PATCH_CACTUS_DECORATED;
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_SWAMP;
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_DESERT;
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE_BADLANDS;
    public static final ConfiguredFeature<?, ?> PATCH_SUGAR_CANE;
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NETHER;
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NETHER;
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_NORMAL;
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_NORMAL;
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_TAIGA;
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_TAIGA;
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_GIANT;
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_GIANT;
    public static final ConfiguredFeature<?, ?> BROWN_MUSHROOM_SWAMP;
    public static final ConfiguredFeature<?, ?> RED_MUSHROOM_SWAMP;
    public static final ConfiguredFeature<?, ?> ORE_MAGMA;
    public static final ConfiguredFeature<?, ?> ORE_SOUL_SAND;
    public static final ConfiguredFeature<?, ?> ORE_GOLD_DELTAS;
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_DELTAS;
    public static final ConfiguredFeature<?, ?> ORE_GOLD_NETHER;
    public static final ConfiguredFeature<?, ?> ORE_QUARTZ_NETHER;
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL_NETHER;
    public static final ConfiguredFeature<?, ?> ORE_BLACKSTONE;
    public static final ConfiguredFeature<?, ?> ORE_DIRT;
    public static final ConfiguredFeature<?, ?> ORE_GRAVEL;
    public static final ConfiguredFeature<?, ?> ORE_GRANITE;
    public static final ConfiguredFeature<?, ?> ORE_DIORITE;
    public static final ConfiguredFeature<?, ?> ORE_ANDESITE;
    public static final ConfiguredFeature<?, ?> ORE_COAL;
    public static final ConfiguredFeature<?, ?> ORE_IRON;
    public static final ConfiguredFeature<?, ?> ORE_GOLD_EXTRA;
    public static final ConfiguredFeature<?, ?> ORE_GOLD;
    public static final ConfiguredFeature<?, ?> ORE_REDSTONE;
    public static final ConfiguredFeature<?, ?> ORE_DIAMOND;
    public static final ConfiguredFeature<?, ?> ORE_LAPIS;
    public static final ConfiguredFeature<?, ?> ORE_INFESTED;
    public static final ConfiguredFeature<?, ?> ORE_EMERALD;
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_LARGE;
    public static final ConfiguredFeature<?, ?> ORE_DEBRIS_SMALL;
    public static final ConfiguredFeature<?, ?> CRIMSON_FUNGI;
    public static final ConfiguredFeature<HugeFungusConfiguration, ?> CRIMSON_FUNGI_PLANTED;
    public static final ConfiguredFeature<?, ?> WARPED_FUNGI;
    public static final ConfiguredFeature<HugeFungusConfiguration, ?> WARPED_FUNGI_PLANTED;
    public static final ConfiguredFeature<?, ?> HUGE_BROWN_MUSHROOM;
    public static final ConfiguredFeature<?, ?> HUGE_RED_MUSHROOM;
    public static final ConfiguredFeature<TreeConfiguration, ?> OAK;
    public static final ConfiguredFeature<TreeConfiguration, ?> DARK_OAK;
    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH;
    public static final ConfiguredFeature<TreeConfiguration, ?> ACACIA;
    public static final ConfiguredFeature<TreeConfiguration, ?> SPRUCE;
    public static final ConfiguredFeature<TreeConfiguration, ?> PINE;
    public static final ConfiguredFeature<TreeConfiguration, ?> JUNGLE_TREE;
    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK;
    public static final ConfiguredFeature<TreeConfiguration, ?> JUNGLE_TREE_NO_VINE;
    public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_JUNGLE_TREE;
    public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_SPRUCE;
    public static final ConfiguredFeature<TreeConfiguration, ?> MEGA_PINE;
    public static final ConfiguredFeature<TreeConfiguration, ?> SUPER_BIRCH_BEES_0002;
    public static final ConfiguredFeature<?, ?> SWAMP_TREE;
    public static final ConfiguredFeature<?, ?> JUNGLE_BUSH;
    public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_0002;
    public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_002;
    public static final ConfiguredFeature<TreeConfiguration, ?> OAK_BEES_005;
    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_0002;
    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_002;
    public static final ConfiguredFeature<TreeConfiguration, ?> BIRCH_BEES_005;
    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_0002;
    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_002;
    public static final ConfiguredFeature<TreeConfiguration, ?> FANCY_OAK_BEES_005;
    public static final ConfiguredFeature<?, ?> OAK_BADLANDS;
    public static final ConfiguredFeature<?, ?> SPRUCE_SNOWY;
    public static final ConfiguredFeature<?, ?> FLOWER_WARM;
    public static final ConfiguredFeature<?, ?> FLOWER_DEFAULT;
    public static final ConfiguredFeature<?, ?> FLOWER_FOREST;
    public static final ConfiguredFeature<?, ?> FLOWER_SWAMP;
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN;
    public static final ConfiguredFeature<?, ?> FLOWER_PLAIN_DECORATED;
    private static final ImmutableList<Supplier<ConfiguredFeature<?, ?>>> FOREST_FLOWER_FEATURES;
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION_COMMON;
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_VEGETATION;
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_BROWN;
    public static final ConfiguredFeature<?, ?> DARK_FOREST_VEGETATION_RED;
    public static final ConfiguredFeature<?, ?> WARM_OCEAN_VEGETATION;
    public static final ConfiguredFeature<?, ?> FOREST_FLOWER_TREES;
    public static final ConfiguredFeature<?, ?> TAIGA_VEGETATION;
    public static final ConfiguredFeature<?, ?> TREES_SHATTERED_SAVANNA;
    public static final ConfiguredFeature<?, ?> TREES_SAVANNA;
    public static final ConfiguredFeature<?, ?> BIRCH_TALL;
    public static final ConfiguredFeature<?, ?> TREES_BIRCH;
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN_EDGE;
    public static final ConfiguredFeature<?, ?> TREES_MOUNTAIN;
    public static final ConfiguredFeature<?, ?> TREES_WATER;
    public static final ConfiguredFeature<?, ?> BIRCH_OTHER;
    public static final ConfiguredFeature<?, ?> PLAIN_VEGETATION;
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE_EDGE;
    public static final ConfiguredFeature<?, ?> TREES_GIANT_SPRUCE;
    public static final ConfiguredFeature<?, ?> TREES_GIANT;
    public static final ConfiguredFeature<?, ?> TREES_JUNGLE;
    public static final ConfiguredFeature<?, ?> BAMBOO_VEGETATION;
    public static final ConfiguredFeature<?, ?> MUSHROOM_FIELD_VEGETATION;
    
    private static <FC extends FeatureConfiguration> ConfiguredFeature<FC, ?> register(final String string, final ConfiguredFeature<FC, ?> cis) {
        return Registry.<ConfiguredFeature<FC, ?>>register(BuiltinRegistries.CONFIGURED_FEATURE, string, cis);
    }
    
    static {
        END_SPIKE = Features.register("end_spike", Feature.END_SPIKE.configured(new SpikeConfiguration(false, (List<SpikeFeature.EndSpike>)ImmutableList.of(), (BlockPos)null)));
        END_GATEWAY = Features.register("end_gateway", Feature.END_GATEWAY.configured(EndGatewayConfiguration.knownExit(ServerLevel.END_SPAWN_POINT, true)).decorated(FeatureDecorator.END_GATEWAY.configured(DecoratorConfiguration.NONE)));
        END_GATEWAY_DELAYED = Features.register("end_gateway_delayed", Feature.END_GATEWAY.configured(EndGatewayConfiguration.delayedExitSearch()));
        CHORUS_PLANT = Features.register("chorus_plant", Feature.CHORUS_PLANT.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).countRandom(4));
        END_ISLAND = Features.register("end_island", Feature.END_ISLAND.configured(FeatureConfiguration.NONE));
        END_ISLAND_DECORATED = Features.register("end_island_decorated", Features.END_ISLAND.decorated(FeatureDecorator.END_ISLAND.configured(DecoratorConfiguration.NONE)));
        DELTA = Features.register("delta", Feature.DELTA_FEATURE.configured(new DeltaFeatureConfiguration(States.LAVA, States.MAGMA_BLOCK, UniformInt.of(3, 4), UniformInt.of(0, 2))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(40))));
        SMALL_BASALT_COLUMNS = Features.register("small_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.fixed(1), UniformInt.of(1, 3))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
        LARGE_BASALT_COLUMNS = Features.register("large_basalt_columns", Feature.BASALT_COLUMNS.configured(new ColumnFeatureConfiguration(UniformInt.of(2, 1), UniformInt.of(5, 5))).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(2))));
        BASALT_BLOBS = Features.register("basalt_blobs", Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(States.NETHERRACK, States.BASALT, UniformInt.of(3, 4))).range(128).squared().count(75));
        BLACKSTONE_BLOBS = Features.register("blackstone_blobs", Feature.REPLACE_BLOBS.configured(new ReplaceSphereConfiguration(States.NETHERRACK, States.BLACKSTONE, UniformInt.of(3, 4))).range(128).squared().count(25));
        GLOWSTONE_EXTRA = Features.register("glowstone_extra", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.GLOWSTONE.configured(new CountConfiguration(10))));
        GLOWSTONE = Features.register("glowstone", Feature.GLOWSTONE_BLOB.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
        CRIMSON_FOREST_VEGETATION = Features.register("crimson_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.CRIMSON_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(6))));
        WARPED_FOREST_VEGETATION = Features.register("warped_forest_vegetation", Feature.NETHER_FOREST_VEGETATION.configured(Configs.WARPED_FOREST_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(5))));
        NETHER_SPROUTS = Features.register("nether_sprouts", Feature.NETHER_FOREST_VEGETATION.configured(Configs.NETHER_SPROUTS_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(4))));
        TWISTING_VINES = Features.register("twisting_vines", Feature.TWISTING_VINES.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
        WEEPING_VINES = Features.register("weeping_vines", Feature.WEEPING_VINES.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
        BASALT_PILLAR = Features.register("basalt_pillar", Feature.BASALT_PILLAR.configured(FeatureConfiguration.NONE).range(128).squared().count(10));
        SEAGRASS_COLD = Features.register("seagrass_cold", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3f)).count(32).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_DEEP_COLD = Features.register("seagrass_deep_cold", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8f)).count(40).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_NORMAL = Features.register("seagrass_normal", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3f)).count(48).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_RIVER = Features.register("seagrass_river", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.4f)).count(48).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_DEEP = Features.register("seagrass_deep", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8f)).count(48).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_SWAMP = Features.register("seagrass_swamp", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.6f)).count(64).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_WARM = Features.register("seagrass_warm", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.3f)).count(80).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEAGRASS_DEEP_WARM = Features.register("seagrass_deep_warm", Feature.SEAGRASS.configured(new ProbabilityFeatureConfiguration(0.8f)).count(80).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        SEA_PICKLE = Features.register("sea_pickle", Feature.SEA_PICKLE.configured(new CountConfiguration(20)).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).chance(16));
        ICE_SPIKE = Features.register("ice_spike", Feature.ICE_SPIKE.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).count(3));
        ICE_PATCH = Features.register("ice_patch", Feature.ICE_PATCH.configured(new DiskConfiguration(States.PACKED_ICE, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK, States.PODZOL, States.COARSE_DIRT, States.MYCELIUM, States.SNOW_BLOCK, States.ICE))).decorated(Decorators.HEIGHTMAP_SQUARE).count(2));
        FOREST_ROCK = Features.register("forest_rock", Feature.FOREST_ROCK.configured(new BlockStateConfiguration(States.MOSSY_COBBLESTONE)).decorated(Decorators.HEIGHTMAP_SQUARE).countRandom(2));
        SEAGRASS_SIMPLE = Features.register("seagrass_simple", Feature.SIMPLE_BLOCK.configured(new SimpleBlockConfiguration(States.SEAGRASS, (List<BlockState>)ImmutableList.of(States.STONE), (List<BlockState>)ImmutableList.of(States.WATER), (List<BlockState>)ImmutableList.of(States.WATER))).decorated(FeatureDecorator.CARVING_MASK.configured(new CarvingMaskDecoratorConfiguration(GenerationStep.Carving.LIQUID, 0.1f))));
        ICEBERG_PACKED = Features.register("iceberg_packed", Feature.ICEBERG.configured(new BlockStateConfiguration(States.PACKED_ICE)).decorated(FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(16));
        ICEBERG_BLUE = Features.register("iceberg_blue", Feature.ICEBERG.configured(new BlockStateConfiguration(States.BLUE_ICE)).decorated(FeatureDecorator.ICEBERG.configured(NoneDecoratorConfiguration.INSTANCE)).chance(200));
        KELP_COLD = Features.register("kelp_cold", Feature.KELP.configured(FeatureConfiguration.NONE).decorated(Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(120, 80.0, 0.0))));
        KELP_WARM = Features.register("kelp_warm", Feature.KELP.configured(FeatureConfiguration.NONE).decorated(Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(80, 80.0, 0.0))));
        BLUE_ICE = Features.register("blue_ice", Feature.BLUE_ICE.configured(FeatureConfiguration.NONE).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(30, 32, 64))).squared().countRandom(19));
        BAMBOO_LIGHT = Features.register("bamboo_light", Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.0f)).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(16));
        BAMBOO = Features.register("bamboo", Feature.BAMBOO.configured(new ProbabilityFeatureConfiguration(0.2f)).decorated(Decorators.HEIGHTMAP_WORLD_SURFACE).squared().decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(160, 80.0, 0.3))));
        VINES = Features.register("vines", Feature.VINES.configured(FeatureConfiguration.NONE).squared().count(50));
        LAKE_WATER = Features.register("lake_water", Feature.LAKE.configured(new BlockStateConfiguration(States.WATER)).decorated(FeatureDecorator.WATER_LAKE.configured(new ChanceDecoratorConfiguration(4))));
        LAKE_LAVA = Features.register("lake_lava", Feature.LAKE.configured(new BlockStateConfiguration(States.LAVA)).decorated(FeatureDecorator.LAVA_LAKE.configured(new ChanceDecoratorConfiguration(80))));
        DISK_CLAY = Features.register("disk_clay", Feature.DISK.configured(new DiskConfiguration(States.CLAY, UniformInt.of(2, 1), 1, (List<BlockState>)ImmutableList.of(States.DIRT, States.CLAY))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        DISK_GRAVEL = Features.register("disk_gravel", Feature.DISK.configured(new DiskConfiguration(States.GRAVEL, UniformInt.of(2, 3), 2, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE));
        DISK_SAND = Features.register("disk_sand", Feature.DISK.configured(new DiskConfiguration(States.SAND, UniformInt.of(2, 4), 2, (List<BlockState>)ImmutableList.of(States.DIRT, States.GRASS_BLOCK))).decorated(Decorators.TOP_SOLID_HEIGHTMAP_SQUARE).count(3));
        FREEZE_TOP_LAYER = Features.register("freeze_top_layer", Feature.FREEZE_TOP_LAYER.configured(FeatureConfiguration.NONE));
        BONUS_CHEST = Features.register("bonus_chest", Feature.BONUS_CHEST.configured(FeatureConfiguration.NONE));
        VOID_START_PLATFORM = Features.register("void_start_platform", Feature.VOID_START_PLATFORM.configured(FeatureConfiguration.NONE));
        MONSTER_ROOM = Features.register("monster_room", Feature.MONSTER_ROOM.configured(FeatureConfiguration.NONE).range(256).squared().count(8));
        WELL = Features.register("desert_well", Feature.DESERT_WELL.configured(FeatureConfiguration.NONE).decorated(Decorators.HEIGHTMAP_SQUARE).chance(1000));
        FOSSIL = Features.register("fossil", Feature.FOSSIL.configured(FeatureConfiguration.NONE).chance(64));
        SPRING_LAVA_DOUBLE = Features.register("spring_lava_double", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared().count(40));
        SPRING_LAVA = Features.register("spring_lava", Feature.SPRING.configured(Configs.LAVA_SPRING_CONFIG).decorated(FeatureDecorator.RANGE_VERY_BIASED.configured(new RangeDecoratorConfiguration(8, 16, 256))).squared().count(20));
        SPRING_DELTA = Features.register("spring_delta", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK, Blocks.SOUL_SAND, Blocks.GRAVEL, Blocks.MAGMA_BLOCK, Blocks.BLACKSTONE))).decorated(Decorators.RANGE_4_8_ROOFED).squared().count(16));
        SPRING_CLOSED = Features.register("spring_closed", Feature.SPRING.configured(Configs.CLOSED_NETHER_SPRING_CONFIG).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(16));
        SPRING_CLOSED_DOUBLE = Features.register("spring_closed_double", Feature.SPRING.configured(Configs.CLOSED_NETHER_SPRING_CONFIG).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(32));
        SPRING_OPEN = Features.register("spring_open", Feature.SPRING.configured(new SpringConfiguration(States.LAVA_STATE, false, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK))).decorated(Decorators.RANGE_4_8_ROOFED).squared().count(8));
        SPRING_WATER = Features.register("spring_water", Feature.SPRING.configured(new SpringConfiguration(States.WATER_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE))).decorated(FeatureDecorator.RANGE_BIASED.configured(new RangeDecoratorConfiguration(8, 8, 256))).squared().count(50));
        PILE_HAY = Features.register("pile_hay", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new RotatedBlockProvider(Blocks.HAY_BLOCK))));
        PILE_MELON = Features.register("pile_melon", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(States.MELON))));
        PILE_SNOW = Features.register("pile_snow", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new SimpleStateProvider(States.SNOW))));
        PILE_ICE = Features.register("pile_ice", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new WeightedStateProvider().add(States.BLUE_ICE, 1).add(States.PACKED_ICE, 5))));
        PILE_PUMPKIN = Features.register("pile_pumpkin", Feature.BLOCK_PILE.configured(new BlockPileConfiguration(new WeightedStateProvider().add(States.PUMPKIN, 19).add(States.JACK_O_LANTERN, 1))));
        PATCH_FIRE = Features.register("patch_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.FIRE), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.NETHERRACK.getBlock())).noProjection().build()).decorated(Decorators.FIRE));
        PATCH_SOUL_FIRE = Features.register("patch_soul_fire", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SOUL_FIRE), new SimpleBlockPlacer()).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.SOUL_SOIL.getBlock())).noProjection().build()).decorated(Decorators.FIRE));
        PATCH_BROWN_MUSHROOM = Features.register("patch_brown_mushroom", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.BROWN_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).noProjection().build()));
        PATCH_RED_MUSHROOM = Features.register("patch_red_mushroom", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.RED_MUSHROOM), SimpleBlockPlacer.INSTANCE).tries(64).noProjection().build()));
        PATCH_CRIMSON_ROOTS = Features.register("patch_crimson_roots", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.CRIMSON_ROOTS), new SimpleBlockPlacer()).tries(64).noProjection().build()).range(128));
        PATCH_SUNFLOWER = Features.register("patch_sunflower", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SUNFLOWER), new DoublePlantPlacer()).tries(64).noProjection().build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(10));
        PATCH_PUMPKIN = Features.register("patch_pumpkin", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PUMPKIN), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(32));
        PATCH_TAIGA_GRASS = Features.register("patch_taiga_grass", Feature.RANDOM_PATCH.configured(Configs.TAIGA_GRASS_CONFIG));
        PATCH_BERRY_BUSH = Features.register("patch_berry_bush", Feature.RANDOM_PATCH.configured(Configs.SWEET_BERRY_BUSH_CONFIG));
        PATCH_GRASS_PLAIN = Features.register("patch_grass_plain", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 5, 10))));
        PATCH_GRASS_FOREST = Features.register("patch_grass_forest", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
        PATCH_GRASS_BADLANDS = Features.register("patch_grass_badlands", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        PATCH_GRASS_SAVANNA = Features.register("patch_grass_savanna", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
        PATCH_GRASS_NORMAL = Features.register("patch_grass_normal", Feature.RANDOM_PATCH.configured(Configs.DEFAULT_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
        PATCH_GRASS_TAIGA_2 = Features.register("patch_grass_taiga_2", Feature.RANDOM_PATCH.configured(Configs.TAIGA_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        PATCH_GRASS_TAIGA = Features.register("patch_grass_taiga", Feature.RANDOM_PATCH.configured(Configs.TAIGA_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(7));
        PATCH_GRASS_JUNGLE = Features.register("patch_grass_jungle", Feature.RANDOM_PATCH.configured(Configs.JUNGLE_GRASS_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(25));
        PATCH_DEAD_BUSH_2 = Features.register("patch_dead_bush_2", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(2));
        PATCH_DEAD_BUSH = Features.register("patch_dead_bush", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        PATCH_DEAD_BUSH_BADLANDS = Features.register("patch_dead_bush_badlands", Feature.RANDOM_PATCH.configured(Configs.DEAD_BUSH_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
        PATCH_MELON = Features.register("patch_melon", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.MELON), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).canReplace().noProjection().build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        PATCH_BERRY_SPARSE = Features.register("patch_berry_sparse", Features.PATCH_BERRY_BUSH.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        PATCH_BERRY_DECORATED = Features.register("patch_berry_decorated", Features.PATCH_BERRY_BUSH.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(12));
        PATCH_WATERLILLY = Features.register("patch_waterlilly", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILY_PAD), SimpleBlockPlacer.INSTANCE).tries(10).build()).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(4));
        PATCH_TALL_GRASS_2 = Features.register("patch_tall_grass_2", Feature.RANDOM_PATCH.configured(Configs.TALL_GRASS_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP).squared().decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 0, 7))));
        PATCH_TALL_GRASS = Features.register("patch_tall_grass", Feature.RANDOM_PATCH.configured(Configs.TALL_GRASS_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(7));
        PATCH_LARGE_FERN = Features.register("patch_large_fern", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LARGE_FERN), new DoublePlantPlacer()).tries(64).noProjection().build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(7));
        PATCH_CACTUS = Features.register("patch_cactus", Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.CACTUS), new ColumnPlacer(1, 2)).tries(10).noProjection().build()));
        PATCH_CACTUS_DESERT = Features.register("patch_cactus_desert", Features.PATCH_CACTUS.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
        PATCH_CACTUS_DECORATED = Features.register("patch_cactus_decorated", Features.PATCH_CACTUS.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(5));
        PATCH_SUGAR_CANE_SWAMP = Features.register("patch_sugar_cane_swamp", Feature.RANDOM_PATCH.configured(Configs.SUGAR_CANE_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(20));
        PATCH_SUGAR_CANE_DESERT = Features.register("patch_sugar_cane_desert", Feature.RANDOM_PATCH.configured(Configs.SUGAR_CANE_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(60));
        PATCH_SUGAR_CANE_BADLANDS = Features.register("patch_sugar_cane_badlands", Feature.RANDOM_PATCH.configured(Configs.SUGAR_CANE_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(13));
        PATCH_SUGAR_CANE = Features.register("patch_sugar_cane", Feature.RANDOM_PATCH.configured(Configs.SUGAR_CANE_CONFIG).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).count(10));
        BROWN_MUSHROOM_NETHER = Features.register("brown_mushroom_nether", Features.PATCH_BROWN_MUSHROOM.range(128).chance(2));
        RED_MUSHROOM_NETHER = Features.register("red_mushroom_nether", Features.PATCH_RED_MUSHROOM.range(128).chance(2));
        BROWN_MUSHROOM_NORMAL = Features.register("brown_mushroom_normal", Features.PATCH_BROWN_MUSHROOM.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(4));
        RED_MUSHROOM_NORMAL = Features.register("red_mushroom_normal", Features.PATCH_RED_MUSHROOM.decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE).chance(8));
        BROWN_MUSHROOM_TAIGA = Features.register("brown_mushroom_taiga", Features.PATCH_BROWN_MUSHROOM.chance(4).decorated(Decorators.HEIGHTMAP_SQUARE));
        RED_MUSHROOM_TAIGA = Features.register("red_mushroom_taiga", Features.PATCH_RED_MUSHROOM.chance(8).decorated(Decorators.HEIGHTMAP_DOUBLE_SQUARE));
        BROWN_MUSHROOM_GIANT = Features.register("brown_mushroom_giant", Features.BROWN_MUSHROOM_TAIGA.count(3));
        RED_MUSHROOM_GIANT = Features.register("red_mushroom_giant", Features.RED_MUSHROOM_TAIGA.count(3));
        BROWN_MUSHROOM_SWAMP = Features.register("brown_mushroom_swamp", Features.BROWN_MUSHROOM_TAIGA.count(8));
        RED_MUSHROOM_SWAMP = Features.register("red_mushroom_swamp", Features.RED_MUSHROOM_TAIGA.count(8));
        ORE_MAGMA = Features.register("ore_magma", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.MAGMA_BLOCK, 33)).decorated(FeatureDecorator.MAGMA.configured(NoneDecoratorConfiguration.INSTANCE)).squared().count(4));
        ORE_SOUL_SAND = Features.register("ore_soul_sand", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.SOUL_SAND, 12)).range(32).squared().count(12));
        ORE_GOLD_DELTAS = Features.register("ore_gold_deltas", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_GOLD_ORE, 10)).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(20));
        ORE_QUARTZ_DELTAS = Features.register("ore_quartz_deltas", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(32));
        ORE_GOLD_NETHER = Features.register("ore_gold_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_GOLD_ORE, 10)).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(10));
        ORE_QUARTZ_NETHER = Features.register("ore_quartz_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.NETHER_QUARTZ_ORE, 14)).decorated(Decorators.RANGE_10_20_ROOFED).squared().count(16));
        ORE_GRAVEL_NETHER = Features.register("ore_gravel_nether", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.GRAVEL, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 0, 37))).squared().count(2));
        ORE_BLACKSTONE = Features.register("ore_blackstone", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHERRACK, States.BLACKSTONE, 33)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(5, 10, 37))).squared().count(2));
        ORE_DIRT = Features.register("ore_dirt", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.DIRT, 33)).range(256).squared().count(10));
        ORE_GRAVEL = Features.register("ore_gravel", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GRAVEL, 33)).range(256).squared().count(8));
        ORE_GRANITE = Features.register("ore_granite", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GRANITE, 33)).range(80).squared().count(10));
        ORE_DIORITE = Features.register("ore_diorite", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.DIORITE, 33)).range(80).squared().count(10));
        ORE_ANDESITE = Features.register("ore_andesite", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.ANDESITE, 33)).range(80).squared().count(10));
        ORE_COAL = Features.register("ore_coal", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.COAL_ORE, 17)).range(128).squared().count(20));
        ORE_IRON = Features.register("ore_iron", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.IRON_ORE, 9)).range(64).squared().count(20));
        ORE_GOLD_EXTRA = Features.register("ore_gold_extra", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GOLD_ORE, 9)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(32, 32, 80))).squared().count(20));
        ORE_GOLD = Features.register("ore_gold", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.GOLD_ORE, 9)).range(32).squared().count(2));
        ORE_REDSTONE = Features.register("ore_redstone", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.REDSTONE_ORE, 8)).range(16).squared().count(8));
        ORE_DIAMOND = Features.register("ore_diamond", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.DIAMOND_ORE, 8)).range(16).squared());
        ORE_LAPIS = Features.register("ore_lapis", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.LAPIS_ORE, 7)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 16))).squared());
        ORE_INFESTED = Features.register("ore_infested", Feature.ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NATURAL_STONE, States.INFESTED_STONE, 9)).range(64).squared().count(7));
        ORE_EMERALD = Features.register("ore_emerald", Feature.EMERALD_ORE.configured(new ReplaceBlockConfiguration(States.STONE, States.EMERALD_ORE)).decorated(FeatureDecorator.EMERALD_ORE.configured(DecoratorConfiguration.NONE)));
        ORE_DEBRIS_LARGE = Features.register("ore_debris_large", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 3)).decorated(FeatureDecorator.DEPTH_AVERAGE.configured(new DepthAverageConfigation(16, 8))).squared());
        ORE_DEBRIS_SMALL = Features.register("ore_debris_small", Feature.NO_SURFACE_ORE.configured(new OreConfiguration(OreConfiguration.Predicates.NETHER_ORE_REPLACEABLES, States.ANCIENT_DEBRIS, 2)).decorated(FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(8, 16, 128))).squared());
        CRIMSON_FUNGI = Features.register("crimson_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
        CRIMSON_FUNGI_PLANTED = Features.<HugeFungusConfiguration>register("crimson_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_CRIMSON_FUNGI_PLANTED_CONFIG));
        WARPED_FUNGI = Features.register("warped_fungi", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_NOT_PLANTED_CONFIG).decorated(FeatureDecorator.COUNT_MULTILAYER.configured(new CountConfiguration(8))));
        WARPED_FUNGI_PLANTED = Features.<HugeFungusConfiguration>register("warped_fungi_planted", Feature.HUGE_FUNGUS.configured(HugeFungusConfiguration.HUGE_WARPED_FUNGI_PLANTED_CONFIG));
        HUGE_BROWN_MUSHROOM = Features.register("huge_brown_mushroom", Feature.HUGE_BROWN_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(States.HUGE_BROWN_MUSHROOM), new SimpleStateProvider(States.HUGE_MUSHROOM_STEM), 3)));
        HUGE_RED_MUSHROOM = Features.register("huge_red_mushroom", Feature.HUGE_RED_MUSHROOM.configured(new HugeMushroomFeatureConfiguration(new SimpleStateProvider(States.HUGE_RED_MUSHROOM), new SimpleStateProvider(States.HUGE_MUSHROOM_STEM), 2)));
        OAK = Features.<TreeConfiguration>register("oak", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 2, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
        DARK_OAK = Features.<TreeConfiguration>register("dark_oak", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.DARK_OAK_LOG), new SimpleStateProvider(States.DARK_OAK_LEAVES), new DarkOakFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0)), new DarkOakTrunkPlacer(6, 2, 1), new ThreeLayersFeatureSize(1, 1, 0, 1, 2, OptionalInt.empty())).maxWaterDepth(Integer.MAX_VALUE).heightmap(Heightmap.Types.MOTION_BLOCKING).ignoreVines().build()));
        BIRCH = Features.<TreeConfiguration>register("birch", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.BIRCH_LOG), new SimpleStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
        ACACIA = Features.<TreeConfiguration>register("acacia", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.ACACIA_LOG), new SimpleStateProvider(States.ACACIA_LEAVES), new AcaciaFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0)), new ForkingTrunkPlacer(5, 2, 2), new TwoLayersFeatureSize(1, 0, 2)).ignoreVines().build()));
        SPRUCE = Features.<TreeConfiguration>register("spruce", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new SpruceFoliagePlacer(UniformInt.of(2, 1), UniformInt.of(0, 2), UniformInt.of(1, 1)), new StraightTrunkPlacer(5, 2, 1), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
        PINE = Features.<TreeConfiguration>register("pine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new PineFoliagePlacer(UniformInt.fixed(1), UniformInt.fixed(1), UniformInt.of(3, 1)), new StraightTrunkPlacer(6, 4, 0), new TwoLayersFeatureSize(2, 0, 2)).ignoreVines().build()));
        JUNGLE_TREE = Features.<TreeConfiguration>register("jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).decorators((List<TreeDecorator>)ImmutableList.of(new CocoaDecorator(0.2f), TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).ignoreVines().build()));
        FANCY_OAK = Features.<TreeConfiguration>register("fancy_oak", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new FancyFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(4), 4), new FancyTrunkPlacer(3, 11, 0), new TwoLayersFeatureSize(0, 0, 0, OptionalInt.of(4))).ignoreVines().heightmap(Heightmap.Types.MOTION_BLOCKING).build()));
        JUNGLE_TREE_NO_VINE = Features.<TreeConfiguration>register("jungle_tree_no_vine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(4, 8, 0), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().build()));
        MEGA_JUNGLE_TREE = Features.<TreeConfiguration>register("mega_jungle_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.JUNGLE_LEAVES), new MegaJungleFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 2), new MegaJungleTrunkPlacer(10, 2, 19), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of(TrunkVineDecorator.INSTANCE, LeaveVineDecorator.INSTANCE)).build()));
        MEGA_SPRUCE = Features.<TreeConfiguration>register("mega_spruce", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(13, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
        MEGA_PINE = Features.<TreeConfiguration>register("mega_pine", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.SPRUCE_LOG), new SimpleStateProvider(States.SPRUCE_LEAVES), new MegaPineFoliagePlacer(UniformInt.fixed(0), UniformInt.fixed(0), UniformInt.of(3, 4)), new GiantTrunkPlacer(13, 2, 14), new TwoLayersFeatureSize(1, 1, 2)).decorators((List<TreeDecorator>)ImmutableList.of(new AlterGroundDecorator(new SimpleStateProvider(States.PODZOL)))).build()));
        SUPER_BIRCH_BEES_0002 = Features.<TreeConfiguration>register("super_birch_bees_0002", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.BIRCH_LOG), new SimpleStateProvider(States.BIRCH_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 2, 6), new TwoLayersFeatureSize(1, 0, 1)).ignoreVines().decorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_0002)).build()));
        SWAMP_TREE = Features.register("swamp_tree", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.OAK_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BlobFoliagePlacer(UniformInt.fixed(3), UniformInt.fixed(0), 3), new StraightTrunkPlacer(5, 3, 0), new TwoLayersFeatureSize(1, 0, 1)).maxWaterDepth(1).decorators((List<TreeDecorator>)ImmutableList.of(LeaveVineDecorator.INSTANCE)).build()).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
        JUNGLE_BUSH = Features.register("jungle_bush", Feature.TREE.configured(new TreeConfiguration.TreeConfigurationBuilder(new SimpleStateProvider(States.JUNGLE_LOG), new SimpleStateProvider(States.OAK_LEAVES), new BushFoliagePlacer(UniformInt.fixed(2), UniformInt.fixed(1), 2), new StraightTrunkPlacer(1, 0, 0), new TwoLayersFeatureSize(0, 0, 0)).heightmap(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).build()));
        OAK_BEES_0002 = Features.<TreeConfiguration>register("oak_bees_0002", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_0002))));
        OAK_BEES_002 = Features.<TreeConfiguration>register("oak_bees_002", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_002))));
        OAK_BEES_005 = Features.<TreeConfiguration>register("oak_bees_005", Feature.TREE.configured(Features.OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_005))));
        BIRCH_BEES_0002 = Features.<TreeConfiguration>register("birch_bees_0002", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_0002))));
        BIRCH_BEES_002 = Features.<TreeConfiguration>register("birch_bees_002", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_002))));
        BIRCH_BEES_005 = Features.<TreeConfiguration>register("birch_bees_005", Feature.TREE.configured(Features.BIRCH.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_005))));
        FANCY_OAK_BEES_0002 = Features.<TreeConfiguration>register("fancy_oak_bees_0002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_0002))));
        FANCY_OAK_BEES_002 = Features.<TreeConfiguration>register("fancy_oak_bees_002", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_002))));
        FANCY_OAK_BEES_005 = Features.<TreeConfiguration>register("fancy_oak_bees_005", Feature.TREE.configured(Features.FANCY_OAK.config().withDecorators((List<TreeDecorator>)ImmutableList.of(Decorators.BEEHIVE_005))));
        OAK_BADLANDS = Features.register("oak_badlands", Features.OAK.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(5, 0.1f, 1))));
        SPRUCE_SNOWY = Features.register("spruce_snowy", Features.SPRUCE.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
        FLOWER_WARM = Features.register("flower_warm", Feature.FLOWER.configured(Configs.DEFAULT_FLOWER_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(4));
        FLOWER_DEFAULT = Features.register("flower_default", Feature.FLOWER.configured(Configs.DEFAULT_FLOWER_CONFIG).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(2));
        FLOWER_FOREST = Features.register("flower_forest", Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(ForestFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(100));
        FLOWER_SWAMP = Features.register("flower_swamp", Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.BLUE_ORCHID), SimpleBlockPlacer.INSTANCE).tries(64).build()).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE));
        FLOWER_PLAIN = Features.register("flower_plain", Feature.FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(PlainFlowerProvider.INSTANCE, SimpleBlockPlacer.INSTANCE).tries(64).build()));
        FLOWER_PLAIN_DECORATED = Features.register("flower_plain_decorated", Features.FLOWER_PLAIN.decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP).squared().decorated(FeatureDecorator.COUNT_NOISE.configured(new NoiseDependantDecoratorConfiguration(-0.8, 15, 4))));
        FOREST_FLOWER_FEATURES = ImmutableList.of((() -> Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILAC), new DoublePlantPlacer()).tries(64).noProjection().build())), (() -> Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.ROSE_BUSH), new DoublePlantPlacer()).tries(64).noProjection().build())), (() -> Feature.RANDOM_PATCH.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.PEONY), new DoublePlantPlacer()).tries(64).noProjection().build())), (() -> Feature.NO_BONEMEAL_FLOWER.configured(new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.LILY_OF_THE_VALLEY), SimpleBlockPlacer.INSTANCE).tries(64).build())));
        FOREST_FLOWER_VEGETATION_COMMON = Features.register("forest_flower_vegetation_common", Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)Features.FOREST_FLOWER_FEATURES)).count(UniformInt.of(-1, 4)).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(5));
        FOREST_FLOWER_VEGETATION = Features.register("forest_flower_vegetation", Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)Features.FOREST_FLOWER_FEATURES)).count(UniformInt.of(-3, 4)).decorated(Decorators.ADD_32).decorated(Decorators.HEIGHTMAP_SQUARE).count(5));
        DARK_FOREST_VEGETATION_BROWN = Features.register("dark_forest_vegetation_brown", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.HUGE_BROWN_MUSHROOM.weighted(0.025f), Features.HUGE_RED_MUSHROOM.weighted(0.05f), Features.DARK_OAK.weighted(0.6666667f), Features.BIRCH.weighted(0.2f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
        DARK_FOREST_VEGETATION_RED = Features.register("dark_forest_vegetation_red", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.HUGE_RED_MUSHROOM.weighted(0.025f), Features.HUGE_BROWN_MUSHROOM.weighted(0.05f), Features.DARK_OAK.weighted(0.6666667f), Features.BIRCH.weighted(0.2f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(FeatureDecorator.DARK_OAK_TREE.configured(DecoratorConfiguration.NONE)));
        WARM_OCEAN_VEGETATION = Features.register("warm_ocean_vegetation", Feature.SIMPLE_RANDOM_SELECTOR.configured(new SimpleRandomFeatureConfiguration((List<Supplier<ConfiguredFeature<?, ?>>>)ImmutableList.of((() -> Feature.CORAL_TREE.configured(FeatureConfiguration.NONE)), (() -> Feature.CORAL_CLAW.configured(FeatureConfiguration.NONE)), (() -> Feature.CORAL_MUSHROOM.configured(FeatureConfiguration.NONE))))).decorated(Decorators.TOP_SOLID_HEIGHTMAP).squared().decorated(FeatureDecorator.COUNT_NOISE_BIASED.configured(new NoiseCountFactorDecoratorConfiguration(20, 400.0, 0.0))));
        FOREST_FLOWER_TREES = Features.register("forest_flower_trees", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.BIRCH_BEES_002.weighted(0.2f), Features.FANCY_OAK_BEES_002.weighted(0.1f)), Features.OAK_BEES_002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(6, 0.1f, 1))));
        TAIGA_VEGETATION = Features.register("taiga_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        TREES_SHATTERED_SAVANNA = Features.register("trees_shattered_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
        TREES_SAVANNA = Features.register("trees_savanna", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.ACACIA.weighted(0.8f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(1, 0.1f, 1))));
        BIRCH_TALL = Features.register("birch_tall", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SUPER_BIRCH_BEES_0002.weighted(0.5f)), Features.BIRCH_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        TREES_BIRCH = Features.register("trees_birch", Features.BIRCH_BEES_0002.decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        TREES_MOUNTAIN_EDGE = Features.register("trees_mountain_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SPRUCE.weighted(0.666f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(3, 0.1f, 1))));
        TREES_MOUNTAIN = Features.register("trees_mountain", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.SPRUCE.weighted(0.666f), Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
        TREES_WATER = Features.register("trees_water", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f)), Features.OAK)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.1f, 1))));
        BIRCH_OTHER = Features.register("birch_other", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.BIRCH_BEES_0002.weighted(0.2f), Features.FANCY_OAK_BEES_0002.weighted(0.1f)), Features.OAK_BEES_0002)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        PLAIN_VEGETATION = Features.register("plain_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK_BEES_005.weighted(0.33333334f)), Features.OAK_BEES_005)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(0, 0.05f, 1))));
        TREES_JUNGLE_EDGE = Features.register("trees_jungle_edge", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f), Features.JUNGLE_BUSH.weighted(0.5f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(2, 0.1f, 1))));
        TREES_GIANT_SPRUCE = Features.register("trees_giant_spruce", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.MEGA_SPRUCE.weighted(0.33333334f), Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        TREES_GIANT = Features.register("trees_giant", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.MEGA_SPRUCE.weighted(0.025641026f), Features.MEGA_PINE.weighted(0.30769232f), Features.PINE.weighted(0.33333334f)), Features.SPRUCE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(10, 0.1f, 1))));
        TREES_JUNGLE = Features.register("trees_jungle", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.1f), Features.JUNGLE_BUSH.weighted(0.5f), Features.MEGA_JUNGLE_TREE.weighted(0.33333334f)), Features.JUNGLE_TREE)).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(50, 0.1f, 1))));
        BAMBOO_VEGETATION = Features.register("bamboo_vegetation", Feature.RANDOM_SELECTOR.configured(new RandomFeatureConfiguration((List<WeightedConfiguredFeature>)ImmutableList.of(Features.FANCY_OAK.weighted(0.05f), Features.JUNGLE_BUSH.weighted(0.15f), Features.MEGA_JUNGLE_TREE.weighted(0.7f)), Feature.RANDOM_PATCH.configured(Configs.JUNGLE_GRASS_CONFIG))).decorated(Decorators.HEIGHTMAP_SQUARE).decorated(FeatureDecorator.COUNT_EXTRA.configured(new FrequencyWithExtraChanceDecoratorConfiguration(30, 0.1f, 1))));
        MUSHROOM_FIELD_VEGETATION = Features.register("mushroom_field_vegetation", Feature.RANDOM_BOOLEAN_SELECTOR.configured(new RandomBooleanFeatureConfiguration((Supplier<ConfiguredFeature<?, ?>>)(() -> Features.HUGE_RED_MUSHROOM), (Supplier<ConfiguredFeature<?, ?>>)(() -> Features.HUGE_BROWN_MUSHROOM))).decorated(Decorators.HEIGHTMAP_SQUARE));
    }
    
    public static final class Decorators {
        public static final BeehiveDecorator BEEHIVE_0002;
        public static final BeehiveDecorator BEEHIVE_002;
        public static final BeehiveDecorator BEEHIVE_005;
        public static final ConfiguredDecorator<CountConfiguration> FIRE;
        public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP;
        public static final ConfiguredDecorator<NoneDecoratorConfiguration> TOP_SOLID_HEIGHTMAP;
        public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP_WORLD_SURFACE;
        public static final ConfiguredDecorator<NoneDecoratorConfiguration> HEIGHTMAP_DOUBLE;
        public static final ConfiguredDecorator<RangeDecoratorConfiguration> RANGE_10_20_ROOFED;
        public static final ConfiguredDecorator<RangeDecoratorConfiguration> RANGE_4_8_ROOFED;
        public static final ConfiguredDecorator<?> ADD_32;
        public static final ConfiguredDecorator<?> HEIGHTMAP_SQUARE;
        public static final ConfiguredDecorator<?> HEIGHTMAP_DOUBLE_SQUARE;
        public static final ConfiguredDecorator<?> TOP_SOLID_HEIGHTMAP_SQUARE;
        
        static {
            BEEHIVE_0002 = new BeehiveDecorator(0.002f);
            BEEHIVE_002 = new BeehiveDecorator(0.02f);
            BEEHIVE_005 = new BeehiveDecorator(0.05f);
            FIRE = FeatureDecorator.FIRE.configured(new CountConfiguration(10));
            HEIGHTMAP = FeatureDecorator.HEIGHTMAP.configured(DecoratorConfiguration.NONE);
            TOP_SOLID_HEIGHTMAP = FeatureDecorator.TOP_SOLID_HEIGHTMAP.configured(DecoratorConfiguration.NONE);
            HEIGHTMAP_WORLD_SURFACE = FeatureDecorator.HEIGHTMAP_WORLD_SURFACE.configured(DecoratorConfiguration.NONE);
            HEIGHTMAP_DOUBLE = FeatureDecorator.HEIGHTMAP_SPREAD_DOUBLE.configured(DecoratorConfiguration.NONE);
            RANGE_10_20_ROOFED = FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(10, 20, 128));
            RANGE_4_8_ROOFED = FeatureDecorator.RANGE.configured(new RangeDecoratorConfiguration(4, 8, 128));
            ADD_32 = FeatureDecorator.SPREAD_32_ABOVE.configured(NoneDecoratorConfiguration.INSTANCE);
            HEIGHTMAP_SQUARE = Decorators.HEIGHTMAP.squared();
            HEIGHTMAP_DOUBLE_SQUARE = Decorators.HEIGHTMAP_DOUBLE.squared();
            TOP_SOLID_HEIGHTMAP_SQUARE = Decorators.TOP_SOLID_HEIGHTMAP.squared();
        }
    }
    
    public static final class States {
        protected static final BlockState GRASS;
        protected static final BlockState FERN;
        protected static final BlockState PODZOL;
        protected static final BlockState COARSE_DIRT;
        protected static final BlockState MYCELIUM;
        protected static final BlockState SNOW_BLOCK;
        protected static final BlockState ICE;
        protected static final BlockState OAK_LOG;
        protected static final BlockState OAK_LEAVES;
        protected static final BlockState JUNGLE_LOG;
        protected static final BlockState JUNGLE_LEAVES;
        protected static final BlockState SPRUCE_LOG;
        protected static final BlockState SPRUCE_LEAVES;
        protected static final BlockState ACACIA_LOG;
        protected static final BlockState ACACIA_LEAVES;
        protected static final BlockState BIRCH_LOG;
        protected static final BlockState BIRCH_LEAVES;
        protected static final BlockState DARK_OAK_LOG;
        protected static final BlockState DARK_OAK_LEAVES;
        protected static final BlockState GRASS_BLOCK;
        protected static final BlockState LARGE_FERN;
        protected static final BlockState TALL_GRASS;
        protected static final BlockState LILAC;
        protected static final BlockState ROSE_BUSH;
        protected static final BlockState PEONY;
        protected static final BlockState BROWN_MUSHROOM;
        protected static final BlockState RED_MUSHROOM;
        protected static final BlockState PACKED_ICE;
        protected static final BlockState BLUE_ICE;
        protected static final BlockState LILY_OF_THE_VALLEY;
        protected static final BlockState BLUE_ORCHID;
        protected static final BlockState POPPY;
        protected static final BlockState DANDELION;
        protected static final BlockState DEAD_BUSH;
        protected static final BlockState MELON;
        protected static final BlockState PUMPKIN;
        protected static final BlockState SWEET_BERRY_BUSH;
        protected static final BlockState FIRE;
        protected static final BlockState SOUL_FIRE;
        protected static final BlockState NETHERRACK;
        protected static final BlockState SOUL_SOIL;
        protected static final BlockState CRIMSON_ROOTS;
        protected static final BlockState LILY_PAD;
        protected static final BlockState SNOW;
        protected static final BlockState JACK_O_LANTERN;
        protected static final BlockState SUNFLOWER;
        protected static final BlockState CACTUS;
        protected static final BlockState SUGAR_CANE;
        protected static final BlockState HUGE_RED_MUSHROOM;
        protected static final BlockState HUGE_BROWN_MUSHROOM;
        protected static final BlockState HUGE_MUSHROOM_STEM;
        protected static final FluidState WATER_STATE;
        protected static final FluidState LAVA_STATE;
        protected static final BlockState WATER;
        protected static final BlockState LAVA;
        protected static final BlockState DIRT;
        protected static final BlockState GRAVEL;
        protected static final BlockState GRANITE;
        protected static final BlockState DIORITE;
        protected static final BlockState ANDESITE;
        protected static final BlockState COAL_ORE;
        protected static final BlockState IRON_ORE;
        protected static final BlockState GOLD_ORE;
        protected static final BlockState REDSTONE_ORE;
        protected static final BlockState DIAMOND_ORE;
        protected static final BlockState LAPIS_ORE;
        protected static final BlockState STONE;
        protected static final BlockState EMERALD_ORE;
        protected static final BlockState INFESTED_STONE;
        protected static final BlockState SAND;
        protected static final BlockState CLAY;
        protected static final BlockState MOSSY_COBBLESTONE;
        protected static final BlockState SEAGRASS;
        protected static final BlockState MAGMA_BLOCK;
        protected static final BlockState SOUL_SAND;
        protected static final BlockState NETHER_GOLD_ORE;
        protected static final BlockState NETHER_QUARTZ_ORE;
        protected static final BlockState BLACKSTONE;
        protected static final BlockState ANCIENT_DEBRIS;
        protected static final BlockState BASALT;
        protected static final BlockState CRIMSON_FUNGUS;
        protected static final BlockState WARPED_FUNGUS;
        protected static final BlockState WARPED_ROOTS;
        protected static final BlockState NETHER_SPROUTS;
        
        static {
            GRASS = Blocks.GRASS.defaultBlockState();
            FERN = Blocks.FERN.defaultBlockState();
            PODZOL = Blocks.PODZOL.defaultBlockState();
            COARSE_DIRT = Blocks.COARSE_DIRT.defaultBlockState();
            MYCELIUM = Blocks.MYCELIUM.defaultBlockState();
            SNOW_BLOCK = Blocks.SNOW_BLOCK.defaultBlockState();
            ICE = Blocks.ICE.defaultBlockState();
            OAK_LOG = Blocks.OAK_LOG.defaultBlockState();
            OAK_LEAVES = Blocks.OAK_LEAVES.defaultBlockState();
            JUNGLE_LOG = Blocks.JUNGLE_LOG.defaultBlockState();
            JUNGLE_LEAVES = Blocks.JUNGLE_LEAVES.defaultBlockState();
            SPRUCE_LOG = Blocks.SPRUCE_LOG.defaultBlockState();
            SPRUCE_LEAVES = Blocks.SPRUCE_LEAVES.defaultBlockState();
            ACACIA_LOG = Blocks.ACACIA_LOG.defaultBlockState();
            ACACIA_LEAVES = Blocks.ACACIA_LEAVES.defaultBlockState();
            BIRCH_LOG = Blocks.BIRCH_LOG.defaultBlockState();
            BIRCH_LEAVES = Blocks.BIRCH_LEAVES.defaultBlockState();
            DARK_OAK_LOG = Blocks.DARK_OAK_LOG.defaultBlockState();
            DARK_OAK_LEAVES = Blocks.DARK_OAK_LEAVES.defaultBlockState();
            GRASS_BLOCK = Blocks.GRASS_BLOCK.defaultBlockState();
            LARGE_FERN = Blocks.LARGE_FERN.defaultBlockState();
            TALL_GRASS = Blocks.TALL_GRASS.defaultBlockState();
            LILAC = Blocks.LILAC.defaultBlockState();
            ROSE_BUSH = Blocks.ROSE_BUSH.defaultBlockState();
            PEONY = Blocks.PEONY.defaultBlockState();
            BROWN_MUSHROOM = Blocks.BROWN_MUSHROOM.defaultBlockState();
            RED_MUSHROOM = Blocks.RED_MUSHROOM.defaultBlockState();
            PACKED_ICE = Blocks.PACKED_ICE.defaultBlockState();
            BLUE_ICE = Blocks.BLUE_ICE.defaultBlockState();
            LILY_OF_THE_VALLEY = Blocks.LILY_OF_THE_VALLEY.defaultBlockState();
            BLUE_ORCHID = Blocks.BLUE_ORCHID.defaultBlockState();
            POPPY = Blocks.POPPY.defaultBlockState();
            DANDELION = Blocks.DANDELION.defaultBlockState();
            DEAD_BUSH = Blocks.DEAD_BUSH.defaultBlockState();
            MELON = Blocks.MELON.defaultBlockState();
            PUMPKIN = Blocks.PUMPKIN.defaultBlockState();
            SWEET_BERRY_BUSH = ((StateHolder<O, BlockState>)Blocks.SWEET_BERRY_BUSH.defaultBlockState()).<Comparable, Integer>setValue((Property<Comparable>)SweetBerryBushBlock.AGE, 3);
            FIRE = Blocks.FIRE.defaultBlockState();
            SOUL_FIRE = Blocks.SOUL_FIRE.defaultBlockState();
            NETHERRACK = Blocks.NETHERRACK.defaultBlockState();
            SOUL_SOIL = Blocks.SOUL_SOIL.defaultBlockState();
            CRIMSON_ROOTS = Blocks.CRIMSON_ROOTS.defaultBlockState();
            LILY_PAD = Blocks.LILY_PAD.defaultBlockState();
            SNOW = Blocks.SNOW.defaultBlockState();
            JACK_O_LANTERN = Blocks.JACK_O_LANTERN.defaultBlockState();
            SUNFLOWER = Blocks.SUNFLOWER.defaultBlockState();
            CACTUS = Blocks.CACTUS.defaultBlockState();
            SUGAR_CANE = Blocks.SUGAR_CANE.defaultBlockState();
            HUGE_RED_MUSHROOM = ((StateHolder<O, BlockState>)Blocks.RED_MUSHROOM_BLOCK.defaultBlockState()).<Comparable, Boolean>setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
            HUGE_BROWN_MUSHROOM = (((StateHolder<O, BlockState>)Blocks.BROWN_MUSHROOM_BLOCK.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.UP, true)).<Comparable, Boolean>setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
            HUGE_MUSHROOM_STEM = (((StateHolder<O, BlockState>)Blocks.MUSHROOM_STEM.defaultBlockState()).setValue((Property<Comparable>)HugeMushroomBlock.UP, false)).<Comparable, Boolean>setValue((Property<Comparable>)HugeMushroomBlock.DOWN, false);
            WATER_STATE = Fluids.WATER.defaultFluidState();
            LAVA_STATE = Fluids.LAVA.defaultFluidState();
            WATER = Blocks.WATER.defaultBlockState();
            LAVA = Blocks.LAVA.defaultBlockState();
            DIRT = Blocks.DIRT.defaultBlockState();
            GRAVEL = Blocks.GRAVEL.defaultBlockState();
            GRANITE = Blocks.GRANITE.defaultBlockState();
            DIORITE = Blocks.DIORITE.defaultBlockState();
            ANDESITE = Blocks.ANDESITE.defaultBlockState();
            COAL_ORE = Blocks.COAL_ORE.defaultBlockState();
            IRON_ORE = Blocks.IRON_ORE.defaultBlockState();
            GOLD_ORE = Blocks.GOLD_ORE.defaultBlockState();
            REDSTONE_ORE = Blocks.REDSTONE_ORE.defaultBlockState();
            DIAMOND_ORE = Blocks.DIAMOND_ORE.defaultBlockState();
            LAPIS_ORE = Blocks.LAPIS_ORE.defaultBlockState();
            STONE = Blocks.STONE.defaultBlockState();
            EMERALD_ORE = Blocks.EMERALD_ORE.defaultBlockState();
            INFESTED_STONE = Blocks.INFESTED_STONE.defaultBlockState();
            SAND = Blocks.SAND.defaultBlockState();
            CLAY = Blocks.CLAY.defaultBlockState();
            MOSSY_COBBLESTONE = Blocks.MOSSY_COBBLESTONE.defaultBlockState();
            SEAGRASS = Blocks.SEAGRASS.defaultBlockState();
            MAGMA_BLOCK = Blocks.MAGMA_BLOCK.defaultBlockState();
            SOUL_SAND = Blocks.SOUL_SAND.defaultBlockState();
            NETHER_GOLD_ORE = Blocks.NETHER_GOLD_ORE.defaultBlockState();
            NETHER_QUARTZ_ORE = Blocks.NETHER_QUARTZ_ORE.defaultBlockState();
            BLACKSTONE = Blocks.BLACKSTONE.defaultBlockState();
            ANCIENT_DEBRIS = Blocks.ANCIENT_DEBRIS.defaultBlockState();
            BASALT = Blocks.BASALT.defaultBlockState();
            CRIMSON_FUNGUS = Blocks.CRIMSON_FUNGUS.defaultBlockState();
            WARPED_FUNGUS = Blocks.WARPED_FUNGUS.defaultBlockState();
            WARPED_ROOTS = Blocks.WARPED_ROOTS.defaultBlockState();
            NETHER_SPROUTS = Blocks.NETHER_SPROUTS.defaultBlockState();
        }
    }
    
    public static final class Configs {
        public static final RandomPatchConfiguration DEFAULT_GRASS_CONFIG;
        public static final RandomPatchConfiguration TAIGA_GRASS_CONFIG;
        public static final RandomPatchConfiguration JUNGLE_GRASS_CONFIG;
        public static final RandomPatchConfiguration DEFAULT_FLOWER_CONFIG;
        public static final RandomPatchConfiguration DEAD_BUSH_CONFIG;
        public static final RandomPatchConfiguration SWEET_BERRY_BUSH_CONFIG;
        public static final RandomPatchConfiguration TALL_GRASS_CONFIG;
        public static final RandomPatchConfiguration SUGAR_CANE_CONFIG;
        public static final SpringConfiguration LAVA_SPRING_CONFIG;
        public static final SpringConfiguration CLOSED_NETHER_SPRING_CONFIG;
        public static final BlockPileConfiguration CRIMSON_FOREST_CONFIG;
        public static final BlockPileConfiguration WARPED_FOREST_CONFIG;
        public static final BlockPileConfiguration NETHER_SPROUTS_CONFIG;
        
        static {
            DEFAULT_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.GRASS), SimpleBlockPlacer.INSTANCE).tries(32).build();
            TAIGA_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.GRASS, 1).add(States.FERN, 4), SimpleBlockPlacer.INSTANCE).tries(32).build();
            JUNGLE_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.GRASS, 3).add(States.FERN, 1), SimpleBlockPlacer.INSTANCE).blacklist((Set<BlockState>)ImmutableSet.of(States.PODZOL)).tries(32).build();
            DEFAULT_FLOWER_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new WeightedStateProvider().add(States.POPPY, 2).add(States.DANDELION, 1), SimpleBlockPlacer.INSTANCE).tries(64).build();
            DEAD_BUSH_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.DEAD_BUSH), SimpleBlockPlacer.INSTANCE).tries(4).build();
            SWEET_BERRY_BUSH_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SWEET_BERRY_BUSH), SimpleBlockPlacer.INSTANCE).tries(64).whitelist((Set<Block>)ImmutableSet.of(States.GRASS_BLOCK.getBlock())).noProjection().build();
            TALL_GRASS_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.TALL_GRASS), new DoublePlantPlacer()).tries(64).noProjection().build();
            SUGAR_CANE_CONFIG = new RandomPatchConfiguration.GrassConfigurationBuilder(new SimpleStateProvider(States.SUGAR_CANE), new ColumnPlacer(2, 2)).tries(20).xspread(4).yspread(0).zspread(4).noProjection().needWater().build();
            LAVA_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, true, 4, 1, (Set<Block>)ImmutableSet.of(Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE));
            CLOSED_NETHER_SPRING_CONFIG = new SpringConfiguration(States.LAVA_STATE, false, 5, 0, (Set<Block>)ImmutableSet.of(Blocks.NETHERRACK));
            CRIMSON_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider().add(States.CRIMSON_ROOTS, 87).add(States.CRIMSON_FUNGUS, 11).add(States.WARPED_FUNGUS, 1));
            WARPED_FOREST_CONFIG = new BlockPileConfiguration(new WeightedStateProvider().add(States.WARPED_ROOTS, 85).add(States.CRIMSON_ROOTS, 1).add(States.WARPED_FUNGUS, 13).add(States.CRIMSON_FUNGUS, 1));
            NETHER_SPROUTS_CONFIG = new BlockPileConfiguration(new SimpleStateProvider(States.NETHER_SPROUTS));
        }
    }
}
